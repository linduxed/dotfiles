#!/usr/bin/env ruby

require 'date'

class TodoFileParser
  TODOWithNumber = Struct.new(:line, :number)

  def initialize(todo_file_path)
    @todo_file_path = todo_file_path
  end

  def mits
    todo_lines = File.readlines(@todo_file_path)
    chomped_lines = todo_lines.map(&:chomp)

    all_todos = chomped_lines.map.with_index do |line, index|
      # todo.sh uses the line numbers of the tasks as their IDs.
      # The IDs are 1-indexed, which is why `index` is incremented by 1.
      TODOWithNumber.new(line, index + 1)
    end

    not_completed_todos = all_todos.reject do |todo|
      todo.line.start_with?('x ')
    end

    not_completed_todos.
      select { |todo| todo.line.match(Constants::MIT_DATE_REGEX) }.
      map { |todo| MIT.new(todo.line, todo.number) }
  end
end

class MIT
  def initialize(todo, number)
    @todo = todo
    @number = number
  end

  def date
    @date ||= Date.parse(@todo.match(Constants::MIT_DATE_REGEX)[1])
  end

  def to_s
    @to_s ||= "#{priority_token}#{task} (#{@number})"
  end

  def past_due?
    date < Constants::TODAY
  end

  def context?(context)
    @todo.match(/#{context}/)
  end

  private

  def task
    @todo.split(Constants::MIT_DATE_REGEX).last.strip
  end

  def priority_token
    if p = @todo.match(/\A\([A-Z]\) /) then p[0] else nil end
  end
end

class DateParser
  def initialize(date_string)
    @date_string = date_string.downcase
  end

  def parse
    maybe_fixed_date ||
      maybe_weekday ||
      maybe_relative_date ||
      maybe_constraint_free_parse
  end

  private

  def maybe_fixed_date
    fixed_dates = {
      'today' => Constants::TODAY,
      'tomorrow' => Constants::TODAY + 1,
    }

    fixed_dates.fetch(@date_string, nil)
  end

  def maybe_weekday
    weekday_name_to_cwday = {
      'monday' => 1,
      'tuesday' => 2,
      'wednesday' => 3,
      'thursday' => 4,
      'friday' => 5,
      'saturday' => 6,
      'sunday' => 7,
      'mon' => 1,
      'tue' => 2,
      'wed' => 3,
      'thu' => 4,
      'fri' => 5,
      'sat' => 6,
      'sun' => 7,
    }

    return nil unless weekday_name_to_cwday.keys.include?(@date_string)

    from_tomorrow_to_one_week_from_now = (1..7).map do |days_into_future|
      Constants::TODAY + days_into_future
    end

    from_tomorrow_to_one_week_from_now.find do |day|
      day.cwday == weekday_name_to_cwday[@date_string]
    end
  end

  def maybe_relative_date
    matches = @date_string.downcase.match(/\A(\d+)([dwm])\z/i)
    return nil if matches.nil?

    number, time_period = matches[1].to_i, matches[2]

    case time_period
    when 'd'
      Constants::TODAY + number
    when 'w'
      Constants::TODAY + (7 * number)
    when 'm'
      Constants::TODAY >> number
    end
  end

  def maybe_constraint_free_parse
    Date.parse(@date_string)
  rescue ArgumentError
    nil
  end
end

class DateFormatter
  def initialize(date)
    @date = date
  end

  def format(with_trailing_colon:, capitalize:)
    formatted_date =
      case
      when in_the_past?
        @date.to_s
      when today?
        capitalize ? 'Today' : 'today'
      when tomorrow?
        "#{capitalize ? 'Tomorrow' : 'tomorrow'}, #{weekday}"
      when within_seven_days?
        weekday
      when next_week?
        "#{weekday}, next week, #{@date}"
      else
        "#{weekday}, #{number_of_weeks_from_now} weeks from now, #{@date}"
      end

    with_trailing_colon ? "#{formatted_date}:" : formatted_date
  end

  private

  def in_the_past?
    @date < Constants::TODAY
  end

  def today?
    @date == Constants::TODAY
  end

  def tomorrow?
    @date == Constants::TODAY + 1
  end

  def within_seven_days?
    @date <= Constants::TODAY + 7
  end

  def next_week?
    @date.cweek == (Constants::TODAY + 7).cweek
  end

  def number_of_weeks_from_now
    # To account for potential transitions between years when counting weeks
    # into the future, step forward week by week and check if the date of the
    # first day that week matches.
    #
    # As the case-statement above has already handled the "next week"-case,
    # start from two weeks into the future.
    two_weeks = 14
    days_in_week = 7

    days_away_from_matching_week =
      (two_weeks..Float::INFINITY).
      step(days_in_week).
      find do |days_into_future|
        future = Constants::TODAY + days_into_future.to_i

        start_of_week_for_date = @date - @date.cwday
        start_of_week_in_future = future - future.cwday

        start_of_week_for_date == start_of_week_in_future
      end.to_i

    days_away_from_matching_week / days_in_week
  end

  def weekday
    Date::DAYNAMES[@date.wday]
  end
end

class MITListPrinter
  def initialize(todo_file_path)
    @todo_file_path = todo_file_path
  end

  def all_mits
    return 'No MITs found.' if mits_from_file.empty?

    grouped_by_date(mits_from_file)
  end

  def mits_with_context(context:)
    context_mits = mits_from_file.select { |mit| mit.context?(context) }
    return 'No MITs found.' if context_mits.empty?

    grouped_by_date(context_mits)
  end

  def mits_without_context(context:)
    not_context_mits = mits_from_file.reject { |mit| mit.context?(context) }
    return 'No MITs found.' if not_context_mits.empty?

    grouped_by_date(not_context_mits)
  end

  private

  def mits_from_file
    @mits_from_file ||= TodoFileParser.new(@todo_file_path).mits
  end

  def grouped_by_date(mits)
    output_lines = []

    if mits.any?(&:past_due?)
      output_lines << 'Past due:'
      mits.select(&:past_due?).each do |mit|
        output_lines << "  #{mit}"
      end
      output_lines << ''
    end

    mits_today_or_in_future = mits.reject(&:past_due?).group_by(&:date)
    sorted_dates = mits_today_or_in_future.keys.sort

    sorted_dates.each do |date|
      mits_for_date = mits_today_or_in_future[date]

      output_lines << DateFormatter.new(date).format(
        with_trailing_colon: true,
        capitalize: true,
      )
      mits_for_date.each do |mit|
        output_lines << "  #{mit}"
      end
      output_lines << ''
    end

    output_lines.join("\n")
  end
end

class BadDateError < StandardError; end
class BadTaskIDError < StandardError; end
class MITDateMissingError < StandardError; end
class MissingDateError < StandardError; end
class MissingTaskIDError < StandardError; end

class TodoFileMutator
  def initialize(todo_file_path)
    @todo_file_path = todo_file_path
  end

  def add_mit(date_string:, task:, include_creation_date:)
    parsed_date = DateParser.new(date_string).parse
    parsed_date or raise(BadDateError, "\"#{date_string}\" is not a valid date.")
    mit_date = "{#{parsed_date.strftime('%Y.%m.%d')}}"

    optional_creation_date = include_creation_date ? "#{Constants::TODAY} " : ''
    mit = "#{optional_creation_date}#{mit_date} #{task}"

    write_mit_at_end_of_todo_file(mit)

    id_of_added_todo = number_of_todos_in_todo_file
    "#{mit}\nTODO: #{id_of_added_todo} added."
  end

  def move_or_make_mit(task_id_string:, date_string:)
    all_tasks = File.readlines(@todo_file_path)
    if valid_task_id?(task_id_string, all_tasks)
      task_id = task_id_string.to_i
    else
      raise(BadTaskIDError, "No task for ID: #{task_id_string}")
    end

    date_string or raise(MissingDateError, 'date argument is missing.')
    parsed_date = DateParser.new(date_string).parse
    parsed_date or raise(BadDateError, "\"#{date_string}\" is not a valid date.")
    mit_date = "{#{parsed_date.strftime('%Y.%m.%d')}}"

    task = all_tasks[task_id - 1]
    changed_task =
      if already_has_mit_date?(task)
        change_mit_date(task, mit_date)
      else
        add_mit_date(task, mit_date)
      end
    all_tasks[task_id - 1] = changed_task
    overwrite_todo_file(all_tasks)

    formatted_date = DateFormatter.new(parsed_date).format(
      with_trailing_colon: false,
      capitalize: false,
    )
    "TODO: '#{task.chomp}' moved to #{formatted_date}"
  end

  def remove_mit_date(task_id_string:)
    task_id_string or raise(MissingTaskIDError, 'missing task ID.')

    all_tasks = File.readlines(@todo_file_path)
    if valid_task_id?(task_id_string, all_tasks)
      task_id = task_id_string.to_i
    else
      raise(BadTaskIDError, "No task for ID: #{task_id_string}")
    end

    task = all_tasks[task_id - 1]
    unless already_has_mit_date?(task)
      raise(MITDateMissingError, "Task #{task_id_string} is not a MIT: '#{task.chomp}'")
    end

    changed_task = task.gsub(/#{Constants::MIT_DATE_REGEX} /, '')
    all_tasks[task_id - 1] = changed_task
    overwrite_todo_file(all_tasks)

    "TODO: Removed MIT date from '#{changed_task.chomp}'"
  end

  private

  def write_mit_at_end_of_todo_file(mit)
    File.open(@todo_file_path, 'a') { |file| file.puts(mit) }
  end

  def number_of_todos_in_todo_file
    File.foreach(@todo_file_path).reduce(0) { |count| count + 1 }
  end

  def already_has_mit_date?(task)
    task.match(Constants::MIT_DATE_REGEX)
  end

  def valid_task_id?(task_id_string, tasks)
    id = task_id_string.to_i # Note: String#to_i on non-numbers returns 0.

    return false if id <= 0
    return false if tasks.count < id

    true
  end

  def add_mit_date(task, mit_date)
    priority_regex = /\([A-Z]\)/
    date_regex = /\d{4}-\d{2}-\d{2}/

    if task.start_with?('x ')
      task.gsub(
        /^x ((#{date_regex} ){0,2})(.+)$/,
        "x \\1#{mit_date} \\3"
      )
    else
      task.gsub(
        /^(#{priority_regex} )?(#{date_regex} )?(.+)$/,
        "\\1\\2#{mit_date} \\3"
      )
    end
  end

  def change_mit_date(task, mit_date)
    task.gsub(Constants::MIT_DATE_REGEX, mit_date)
  end

  def overwrite_todo_file(tasks)
    File.write(@todo_file_path, tasks.join)
  end
end

class CLI
  class BadActionError < StandardError; end

  EX_USAGE = 64

  def run
    output =
      case
      when usage_requested_from_todo_help?
        usage_message
      when %w(usage -h --help).include?(ARGV[1])
        usage_message
      when %w(-v --version).include?(ARGV[1])
        version_message
      when ARGV[1].nil?
        MITListPrinter.new(ENV['TODO_FILE']).all_mits
      when ARGV[1].match(/@\w+/)
        MITListPrinter.new(ENV['TODO_FILE']).mits_with_context(
          context: ARGV[1]
        )
      when ARGV[1] == 'not' && ARGV[2].match(/@\w+/)
        MITListPrinter.new(ENV['TODO_FILE']).mits_without_context(
          context: ARGV[2]
        )
      when ARGV[1] == 'mv'
        TodoFileMutator.new(ENV['TODO_FILE']).move_or_make_mit(
          task_id_string: ARGV[2],
          date_string: ARGV[3],
        )
      when ARGV[1] == 'rm'
        TodoFileMutator.new(ENV['TODO_FILE']).remove_mit_date(
          task_id_string: ARGV[2],
        )
      when !ARGV[1].nil? && !ARGV[2].nil?
        TodoFileMutator.new(ENV['TODO_FILE']).add_mit(
          date_string: ARGV[1],
          task: ARGV[2],
          include_creation_date: ENV['TODOTXT_DATE_ON_ADD'],
        )
      else
        fail BadActionError
      end

    $stdout.puts output
    exit 0
  rescue BadDateError, BadTaskIDError, MITDateMissingError,
         MissingDateError, MissingTaskIDError => e
    $stderr.puts "MIT: #{e.message}"
    exit EX_USAGE
  rescue BadActionError
    $stderr.puts usage_message
    exit EX_USAGE
  end

  private

  def usage_requested_from_todo_help?
    # Normally the add-on will be invoked as a subcommand (like
    # `todo.sh mit foo`), meaning that the actual mit-action, along with its
    # various arguments, will be placed in ARGV[1] and higher.
    #
    # The only exception to this case is when the add-on is invoked through
    # `todo.sh help`. This command will iterate through all available add-ons
    # and invoke them like `mit usage`, meaning that the action will be present
    # in ARGV[0].

    ARGV[0] == 'usage'
  end

  def usage_message
    usage_message = <<-EOF
      Most Important Tasks (MIT):
        Displays Most Important Tasks (MIT) in todo.txt file, adds new ones or
        turns MIT tasks into standard ones.

        mit [-h|--help|-v|--version] [date|day|relativedate task] [rm ID]
          [not @context|@context] [mv ID DATE|DAY|RELATIVEDATE|FREEFORMDATE]

        -h, --help      Displays help message.
        -v, --version   Displays version information.

        Date strings:

        DATE must be in the format of YYYY.MM.DD.
        DAY can be full or short day names, today or tomorrow.
        RELATIVEDATE is defined as an integer, followed by one of the letters
        "d", "w" or "m" (days, weeks and months).
        FREEFORMDATE is any string that resembles a date; an attempt will be
        made to parse it. FREEFORMDATE is the last date format checked.

        Sub-commands:

        mit
          List all MITs with default formatting.

        mit rm ID
          Convert the MIT identified by ID to a standard task.

        mit not @context|@context
          Displays all MIT's not in or in specified context.

        mit DATE|DAY|RELATIVEDATE|FREEFORMDATE task
          Add MIT for chosen date.

        mit mv ID DATE|DAY|RELATIVEDATE|FREEFORMDATE
          Move the MIT identified by ID to a new day.
    EOF

    # Remove leading indentation
    usage_message.gsub(/^#{usage_message.scan(/^[ \t]*(?=\S)/).min}/, '')
  end

  def version_message
    "mit (ruby) #{Constants::VERSION}"
  end
end

module Constants
  TODAY = ENV.key?('FIXED_DATE') ? Date.parse(ENV['FIXED_DATE']) : Date.today
  MIT_DATE_REGEX = /\{(\d{4}\.\d{2}\.\d{2})\}/
  VERSION = 'v1.0.2'.freeze
end


CLI.new.run
